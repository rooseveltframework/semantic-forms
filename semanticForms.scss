// #region global styles
form.semanticForms, form.semanticForms.light, table.semanticForms {
  --semanticFormsFontFamily: sans-serif;
  --semanticFormsFormBgColor: #fff;
  --semanticFormsFormSubBgColor: #f5f5f5;
  --semanticFormsTextColor: #000;
  --semanticFormsBorderColor: #c0c0c0;
  --semanticFormsSubBorderColor: #c0c0c0;
  --semanticFormsPlaceholderColor: rgba(0, 0, 0, 0.75);
  --semanticFormsScrollbarColor: #c0c0c0;
  --semanticFormsClearButtonColor: #000;
  --semanticFormsButtonGradientLight: #fff;
  --semanticFormsButtonGradientDark: #c0c0c0;
  --semanticFormsInvalid: #f00;
  --semanticFormsInvalidBorder: 1px solid var(--semanticFormsInvalid);
  --semanticFormsInputHeight: 38px;
  --semanticFormsInputFontSize: 16px;
  --semanticFormsInputTopMargin: 15px;
  --semanticFormsInputMinWidth: 250px;
  --semanticFormsBorderRadius: 10px;
  --semanticFormsNestedFieldsetBgColor: rgba(0, 0, 0, .05);
  --semanticFormsNestedFieldsetBorder: 1px rgba(0, 0, 0, .2) solid;
  --semanticFormsNestedInputBgColor: #fff;
  --semanticFormsBorder: 1px var(--semanticFormsBorderColor) solid;
  --semanticFormsTableTitleColor: #fcfcfc;
  --semanticFormsTableHeaderColor: #eeeeee;
  --semanticFormsTableOddColor: #dddddd;
  --semanticFormsTableEvenColor: #cccccc;
    --semanticFormsTableBorder: 1px #c0c0c0 solid;
  --semanticFormsSelectIcon: url("data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' fill='%23000'%3E%3Cpolygon points='0,0 100,0 50,50'/%3E%3C/svg%3E");
  --semanticFormsCustomResizer: url("data:image/svg+xml;utf8,%3Csvg width='20' height='20' viewBox='0 0 5.2916665 5.2916666' version='1.1' id='svg5' xmlns='http://www.w3.org/2000/svg' xmlns:svg='http://www.w3.org/2000/svg'%3E%3Cdefs id='defs2' /%3E%3Cg id='layer1'%3E%3Cpath style='fill:%23aaa;stroke:%23aaa;stroke-width:0.264583;stroke-dasharray:none;stroke-opacity:1' d='M 2.8245112,5.0994569 C 4.9396993,2.9842685 4.9396993,2.9842685 4.9396993,2.9842685' id='path1034' /%3E%3Cpath style='fill:%23aaa;stroke:%23aaa;stroke-width:0.264583;stroke-dasharray:none;stroke-opacity:1' d='M 1.515747,5.0406977 C 4.8873304,1.6691138 4.8873304,1.6691138 4.8873304,1.6691138' id='path1034-1' /%3E%3Cpath style='fill:%23aaa;stroke:%23aaa;stroke-width:0.264583;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1' d='M 0.20657789,5.0909782 C 4.9312207,0.3663348 4.9312207,0.3663348 4.9312207,0.3663348' id='path1034-9' /%3E%3C/g%3E%3C/svg%3E");
  --semanticFormsSearchIcon: url("data:image/svg+xml,%3Csvg%20width%3D%2214px%22%20height%3D%2214px%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M15.7955%2015.8111L21%2021M18%2010.5C18%2014.6421%2014.6421%2018%2010.5%2018C6.35786%2018%203%2014.6421%203%2010.5C3%206.35786%206.35786%203%2010.5%203C14.6421%203%2018%206.35786%2018%2010.5Z%22%20stroke%3D%22%23000000%22%20stroke-width%3D%222%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%2F%3E%3C%2Fsvg%3E");
}

@mixin dark-mode {
  --semanticFormsFormBgColor: #555;
  --inputBackgroudColor: rgba(85,85,85,0.1);
  --semanticFormsFormSubBgColor: #2f2f2f;
  --semanticFormsTextColor: #fff;
  --semanticFormsBorderColor: #656565;
  --semanticFormsSubBorderColor: #3f3f3f;
  --semanticFormsPlaceholderColor: rgba(255, 255, 255, 0.85);
  --semanticFormsScrollbarColor: #373737;
  --semanticFormsClearButtonColor: #fff;
  --semanticFormsButtonGradientLight: #6f6f6f;
  --semanticFormsButtonGradientDark: #373737;
  --semanticFormsNestedFieldsetBgColor: rgba(255, 255, 255, .05);
  --semanticFormsNestedFieldsetBorder: 1px rgba(255, 255, 255, .1) solid;
  --semanticFormsNestedInputBgColor: rgba(255, 255, 255, .15);
  --semanticFormsBorder: none;
  --semanticFormsTableTitleColor: #3f3f3f;
  --semanticFormsTableHeaderColor: #4f4f4f;
  --semanticFormsTableOddColor: #3f3f3f;
  --semanticFormsTableEvenColor: #4f4f4f;
  --semanticFormsTableBorder: 1px #656565 solid;
  --semanticFormsSelectIcon: url("data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' fill='%23fff'%3E%3Cpolygon stroke='%23fff' points='0,0 100,0 50,50'/%3E%3C/svg%3E");
  --semanticFormsCustomResizer: url("data:image/svg+xml;utf8,%3Csvg width='20' height='20' viewBox='0 0 5.2916665 5.2916666' version='1.1' id='svg5' xmlns='http://www.w3.org/2000/svg' xmlns:svg='http://www.w3.org/2000/svg'%3E%3Cdefs id='defs2' /%3E%3Cg id='layer1'%3E%3Cpath style='fill:%23c9c9c9;stroke:%23c9c9c9;stroke-width:0.264583;stroke-dasharray:none;stroke-opacity:1' d='M 2.8245112,5.0994569 C 4.9396993,2.9842685 4.9396993,2.9842685 4.9396993,2.9842685' id='path1034' /%3E%3Cpath style='fill:%23c9c9c9;stroke:%23c9c9c9;stroke-width:0.264583;stroke-dasharray:none;stroke-opacity:1' d='M 1.515747,5.0406977 C 4.8873304,1.6691138 4.8873304,1.6691138 4.8873304,1.6691138' id='path1034-1' /%3E%3Cpath style='fill:%23c9c9c9;stroke:%23c9c9c9;stroke-width:0.264583;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1' d='M 0.20657789,5.0909782 C 4.9312207,0.3663348 4.9312207,0.3663348 4.9312207,0.3663348' id='path1034-9' /%3E%3C/g%3E%3C/svg%3E");
  --semanticFormsSearchIcon: url("data:image/svg+xml,%3Csvg%20width%3D%2214px%22%20height%3D%2214px%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M15.7955%2015.8111L21%2021M18%2010.5C18%2014.6421%2014.6421%2018%2010.5%2018C6.35786%2018%203%2014.6421%203%2010.5C3%206.35786%206.35786%203%2010.5%203C14.6421%203%2018%206.35786%2018%2010.5Z%22%20stroke%3D%22%23FFFFFF%22%20stroke-width%3D%222%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%2F%3E%3C%2Fsvg%3E");

  input::-webkit-calendar-picker-indicator {
    filter: invert(100%);
  }
}

@media (prefers-color-scheme: dark) {
  html:not(.light) {
    body:not(.light) {
      form.semanticForms:not(.light), table.semanticForms:not(.light) {
        @include dark-mode;
      }
    }
  }
}

html:not(.light) {
  body:not(.light) {
    form.semanticForms.dark, table.semanticForms.dark {
      @include dark-mode;
    }
  }
}

form.semanticForms.dark, table.semanticForms.dark {
  @include dark-mode;
}
// #endregion

form.semanticForms,
form.semanticForms.light,
table.semanticForms,
table.semanticForms.light {
  font-family: var(--semanticFormsFontFamily);
  width: 100%;
  container-type: inline-size;
  container-name: semanticForm;

  &:not(table) {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  // style reset
  fieldset,
  label,
  input,
  select,
  textarea,
  button,
  menu:has(li > input, li > label, li > button, li > select, li > textarea),
  dl:has(dt > label, dd > input, dd > select, dd > textarea),
  dt:has(> input, > select, > textarea),
  dd:has(> input, > select, > textarea, > ul, > menu),
  div:has(dt, dd),
  dd > p {
    color: var(--semanticFormsTextColor);
    font-family: var(--semanticFormsFontFamily);
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  // #region input styling
  input:not([type='submit'], [type='reset'], [type='image'], [type=checkbox], [type=radio]),
  select,
  textarea {
    font-size: var(--semanticFormsInputFontSize);
    background: var(--semanticFormsFormBgColor);
    border: var(--semanticFormsBorder);
    border-radius: var(--semanticFormsBorderRadius);
    width: 100%;
    touch-action: manipulation;
    outline: none;

    &:not([type="range"]):placeholder-shown {
      padding: 6px 20px;
    }
    
    &:not([type="range"]) {
      padding: 6px 30px 6px 20px;
    }

    &[type="password"], &[type="text"]:has(~ button.show) {
      padding: 6px 55px 6px 20px;
    }

    &[type="range"],
    &[type="color"] {
      cursor: pointer;
    }

    &[disabled] {
      cursor: not-allowed;
      opacity: 0.5;

      ~ label:first-of-type {
        opacity: 0.5;
      }

      ~ label + button {
        display: none;
      }
    }
  }

  // focused styles
  input:not([type='submit'], [type='reset'], [type='image']),
  select,
  textarea {
    // custom focus highlight
    &:focus {
      outline: none;
      box-shadow: 0 0 0 1px var(--semanticFormsBorderColor);
    }
  }

  input:not([type='submit'], [type='reset'], [type='image'], [type=checkbox], [type=radio]),
  select {
    height: var(--semanticFormsInputHeight);
  }

  // specific styling for color input
  input[type=color] {
    height: var(--semanticFormsInputHeight);
    padding: 4px !important;
    padding-right: 30px !important;
  }

  input[type=checkbox],
  input[type=radio] {
    // 30% larger based on parent font size
    width: 1.4em;
    height: 1.4em;
    margin: 3px 0;
    cursor: pointer;

    & ~ label:first-of-type {
      color: var(--semanticFormsTextColor) !important;
    }
  }

  input[type=file] {
    cursor: pointer;
    font-size: var(--semanticFormsInputFontSize);
  }

  select {
    cursor: pointer;

    &:not([multiple]) {
      // custom dropdown graphic on select element
      background-image: var(--semanticFormsSelectIcon);
      background-size: 14px;
      background-position: calc(100% - 8px) 16px;
      background-repeat: no-repeat;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
    }

    &[multiple] {
      min-height: 38px;
      height: 100px;
      padding: 0 !important;

      option {
        padding: 6px 20px;

        &:first-of-type {
          border-top-left-radius: var(--semanticFormsBorderRadius);
        }

        &:last-of-type {
          border-bottom-left-radius: var(--semanticFormsBorderRadius);
        }
      }
    }
  }

  textarea {
    resize: vertical;
    line-height: 1.5;
    width: 100%;
    min-height: 38px;
  }

  input[type="search"] {
    background: var(--semanticFormsSearchIcon) no-repeat 10px;
    background-color: var(--semanticFormsFormBgColor);
    background-size: 18px;
    padding-left: 32px !important; // shift values to the right

    & + label.floatLabelFormAnimatedLabel {
      left: 32px !important; // override float label
    }

    &:focus,
    &:not(:placeholder-shown) {
      & + label.floatLabelFormAnimatedLabel {
        left: 20px !important;
      }
    }

    // hide native cancel button
    &::-webkit-search-cancel-button {
      display: none;
    }
  }
  // #endregion

  // #region buttons
  button.clear, button.show {
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    position: absolute;
    height: min-content;
    // account for margin above each input
    top: calc(var(--semanticFormsInputTopMargin) + 6px);
    right: 0;
    width: 25px;
    height: 25px;
    margin: auto 6px;
    padding: 5px;
    background: none;
    border: none;
    color: var(--semanticFormsClearButtonColor);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  button.show {
    right: 25px;
  }

  // custom styling of clear button on textarea
  textarea ~ .clear {
    bottom: auto;
  }

  // hide clear/show button while placeholder text is visible
  input:placeholder-shown ~ .clear,
  input:placeholder-shown ~ .show,
  textarea:placeholder-shown ~ .clear,
  input[type=file] ~ .clear {
    display: none;
  }

  // button styling
  input[type='submit'],
  input[type='reset'],
  button:not(.clear):not(.show) {
    appearance: none;
    -moz-appearance: none;
    -webkit-appearance: none;
    cursor: pointer;
    max-width: max-content;
    background-image: linear-gradient(to bottom, var(--semanticFormsButtonGradientLight) 0%, var(--semanticFormsButtonGradientDark) 100%);
    background-origin: border-box; // prevents graphical errors in Firefox
    border: 2px var(--semanticFormsButtonGradientDark) solid;
    border-radius: 20px;
    padding: 5px 25px;
    font-size: 100%;
    line-height: 1;
    user-select: none;

    &:active {
      background-image: linear-gradient(to bottom, var(--semanticFormsButtonGradientDark) 0%, var(--semanticFormsButtonGradientLight) 100%);
    }
  }

  input[type='submit'],
  input[type='reset'],
  input[type='image'],
  button:not(.clear):not(.show) {
    transition: filter 0.1s;

    &:hover {
      filter: brightness(1.05);
    }
  }
  // #endregion

  // #region invalid styling
  [data-invalid-text] {
    display: none;
    color: var(--semanticFormsInvalid);
  }

  input:not([type='submit'], [type='reset'], [type='image']),
  select,
  textarea {
    &.invalid,
    &:user-invalid {
      border: var(--semanticFormsInvalidBorder) !important;

      ~ label:nth-of-type(2) {
        color: var(--semanticFormsInvalid) !important;
      }

      ~ [data-invalid-text] {
        font-size: small;
        display: flex;
      }
    }

  }
  // #endregion

  // disable autofill yellow
  input:-webkit-autofill,
  input:-webkit-autofill:hover,
  input:-webkit-autofill:focus,
  input:-webkit-autofill:active,
  textarea:-webkit-autofill,
  textarea:-webkit-autofill:hover,
  textarea:-webkit-autofill:focus,
  textarea:-webkit-autofill:active,
  select:-webkit-autofill,
  select:-webkit-autofill:hover,
  select:-webkit-autofill:focus,
  select:-webkit-autofill:active {
    -webkit-box-shadow: 0 0 0 1000px var(--semanticFormsFormBgColor) inset;
    transition: background-color 5000s ease-in-out 0s, color 5000s ease-in-out 0s;
    transition-delay: 5000s;
    transition-property: background-color, color;
  }

  fieldset {
    border-radius: var(--semanticFormsBorderRadius);
    background: var(--semanticFormsFormSubBgColor);
    border: 1px var(--semanticFormsSubBorderColor) solid;
    display: flex;
    flex-direction: column;
    gap: 5px;
    padding: 10px 10px 20px 10px;
    margin-bottom: 15px;

    // nested fieldsets are darkened
    fieldset {
      background-color: var(--semanticFormsNestedFieldsetBgColor);
      border: var(--semanticFormsNestedFieldsetBorder);

      // add opacity to styled inputs to prevent blending with background
      input:not([type='submit'], [type='reset'], [type='image'], [type=checkbox], [type=radio]),
      select,
      textarea {
        background-color: var(--semanticFormsNestedInputBgColor);
      }
    }
  }

  details[open], summary {
    margin-bottom: 10px;
  }

  summary {
    cursor: pointer;
  }

  // update for scrollbars
  @supports (scrollbar-color: auto) {
    textarea {
      scrollbar-color: var(--semanticFormsScrollbarColor) transparent;

      &::-webkit-resizer {
        border: none;
        background-image: var(--semanticFormsCustomResizer);
        background-size: 14px;
        background-repeat: no-repeat;
        background-position: 100%;
        margin: 0 2px 2px 0;
      }
    }

    select[multiple] {
      scrollbar-color: var(--semanticFormsScrollbarColor) transparent;
    }
  }

  // #region container layout

  dl:has(dt > label, dd > input, dd > select, dd > textarea) {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(var(--semanticFormsInputMinWidth), 1fr));
    gap: 10px;
    margin-bottom: 10px;

    dd {
      position: relative;

      &.checkboxes, &.radios {
        display: flex;
        flex-direction: column;
        gap: 10px;

        // checkbox subtext
        & > label {
          padding-left: 20px;
          font-size: small;
          color: var(--semanticFormsTextColor);
        }
      }

      &:not(.checkboxes, .radios) {
        gap: 10px;
        max-width: 100%;

        // places all items within the <dd> vertically
        &:not(.singleCheckbox, .singleRadio) {
          display: flex;
          flex-direction: column;
        }

        &.singleCheckbox,
        &.singleRadio {
          display: grid;
          grid-template-columns: 15px 1fr;
          align-items: center;
          padding-left: 11px;

          & > :not(input[type='checkbox'], input[type='radio'], label) {
            grid-column: 1 / -1;
          }

          // single checkbox subtext
          label:nth-of-type(2) {
            grid-column: 1 / -1;
            padding-left: 20px;
            font-size: small;
            color: var(--semanticFormsTextColor);
          }
        }

        &.singleRadio {
          input {
            margin: 0;
          }
        }
      }

      &.checkboxes ul, &.radios ul {
        display: flex;
        flex-direction: column;
        margin-top: var(--semanticFormsInputTopMargin);
        padding-left: 10px;
        gap: 5px;

        li {
          display: flex;
          align-items: center;
          gap: 5px;
        }
      }
    }
  }

  p {
    // input/label combo
    &:has(input:not([type='checkbox'], [type='radio']), textarea, label) {
      display: flex;
      flex-direction: column;
      gap: 5px;
    }

    // checkbox or radio/label combo
    &:has(input[type='checkbox'], input[type='radio']) {
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: 5px;
    }
  }

  menu:has(li > input, li > label, li > button, li > select, li > textarea),
  ul:has(li > input, li > label, li > button, li > select, li > textarea) {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 10px;
    list-style-type: none;
  }
  // #endregion

  // #region labels

  input[type=checkbox] + label:first-of-type,
  input[type=radio] + label:first-of-type {
    // shift text down to match center
    padding-top: 2px;
    font-size: var(--semanticFormsInputFontSize);
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 5px;

    span.required {
      cursor: help;
      pointer-events: auto;
      color: red;
    }

    span.help {
      cursor: help;
      pointer-events: auto;

      svg {
        width: 80%;
      }
    }
  }

  .floatLabelForm {
    grid-template-columns: repeat(auto-fit, minmax(var(--semanticFormsInputMinWidth), 1fr));

    div {
      position: relative;
      width: 100%;
      min-width: var(--semanticFormsInputMinWidth);
      max-width: 100%;
      max-width: 365px;

      dd:not(.singleCheckbox, .singleRadio, .checkboxes, .radios) {
        input:not([type='submit'], [type='reset'], [type='image']),
        select,
        textarea {
          &:focus:not([type=checkbox], [type=radio], .no-float-label) ~ label:first-of-type,
          &:not(:placeholder-shown):not(.no-float-label):not([type=checkbox]):not([type=radio]) ~ label:first-of-type {
            color: var(--semanticFormsTextColor) !important;
            // TODO: finish this work on making the help icon responsive
            // width: 100%;
            // width: calc(100% + 20px);
            transform: translateY(-150%) scale(0.7);

            // span.required,
            // span.help {
            //   position: static;
            //   right: auto;
            // }
          }
        }

        // hide float label if no-float-label class is present
        input:not([type='submit'], [type='reset'], [type='image']),
        select,
        textarea {
          &:focus.no-float-label ~ label:first-of-type,
          &:not(:placeholder-shown).no-float-label:not([type=checkbox]):not([type=radio]) ~ label:first-of-type {
            display: none;
          }
        }

        select ~ label:first-of-type {
          // force label to be correct color
          color: var(--semanticFormsTextColor) !important;
        }

        label:first-of-type {
          line-height: 1.2;
          font-size: var(--semanticFormsInputFontSize);
          position: absolute;
          transform-origin: left center;
          pointer-events: none;
          // when the label is positioned within the input it needs a buffer
          top: calc(var(--semanticFormsInputTopMargin) + 10px);
          left: 20px;
          transition: transform 250ms;
          cursor: text;
          flex: 1;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          min-width: 0;
          width: calc(100% - 35px);
        }

        // subtext
        label:nth-of-type(2) {
          margin-top: -5px;
          padding-left: 20px;
          font-size: small;
          color: var(--semanticFormsTextColor);
        }

        input,
        textarea,
        select {
          margin-top: var(--semanticFormsInputTopMargin);
        }

        input,
        textarea {
          transition: opacity 250ms;
          // hide placeholder content until input is focused
          &::placeholder {
            opacity: 0;
            transition: opacity 250ms;
          }

          &::-moz-placeholder {
            opacity: 0;
            transition: opacity 250ms;
          }

          &::-webkit-input-placeholder {
            opacity: 0;
            transition: opacity 250ms;
          }

          &:-ms-input-placeholder {
            opacity: 0;
            transition: opacity 250ms;
          }

          // show placeholder content when focused
          &:focus {
            &::placeholder {
              opacity: 1;
            }

            &::-moz-placeholder {
              opacity: 1;
            }

            &::-webkit-input-placeholder {
              opacity: 1;
            }

            &:-ms-input-placeholder {
              opacity: 1;
            }
          }
        }

        label:first-of-type {
          user-select: none;
          color: var(--semanticFormsPlaceholderColor);
          touch-action: manipulation;
          display: flex;
          align-items: center;
          gap: 5px;

          // TODO: same as below
          // &:has(span.help) {
          //   width: 80%;
          //   padding-right: 20px;
          // }

          // &:has(span.required) {
          //   width: 80%;
          //   padding-right: 10px;
          // }

          span.required {
            // TODO: this places the required asterisk too far to the right when the float label is shrunk
            // position: absolute;
            // right: 0;
            cursor: help;
            pointer-events: auto;
            color: red;
          }

          span.help {
            // TODO: this places the help icon too far to the right when the float label is shrunk
            // position: absolute;
            // right: 0;
            cursor: help;
            pointer-events: auto;

            svg {
              width: 80%;
            }
          }

          // // TODO: cover the case where an input is required AND has help text
          // &:has(span.required, span.help) {
          //   width: 80%;
          //   padding-right: 30px;

          //   span.required {
          //     right: 18px;
          //   }
          // }
        }
      }

      // top level label for checkbox and radio groups
      dt {
        position: relative;

        label {
          z-index: 2; // ensure the hoverable icon is interactable
          user-select: auto;
          color: var(--semanticFormsTextColor);
          font-size: var(--semanticFormsInputFontSize);
          position: absolute;
          transform-origin: left center;
          transform: translateY(-100%) scale(0.7);
          top: var(--semanticFormsInputTopMargin);
          left: 10px;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          min-width: 0;
          width: calc(100% + 20px);

          // TODO: remove this? // &:has(span.help) {
            // width: 100%;
            // padding-right: 20px;
          // }

          span.help {
            // TODO: remove this? // position: absolute;
            // right: 0;
            cursor: help;
            pointer-events: auto;
          }
        }
      }

      &:has(dd input:required) {
        dt {
          label {
            width: 100%;
            padding-right:10px;
          }

          label > span {
            // TODO: remove this? // position: absolute;
            // right: 0;
            margin-left: 5px;
            cursor: help;
            pointer-events: auto;
            color: red;
          }

        }
      }
    }

    input, textarea {
      &::placeholder {
        color: var(--semanticFormsPlaceholderColor);
        opacity: 1;
      }
    }
    // #endregion
  }

  &.semanticFormsActive {
    // #region colspan classes
    div {
      &[class^='colspan-'] {
        max-width: 100%;
      }

      &.colspan-full {
        grid-column: 1 / -1;
      }

      &.colspan-5 {
        grid-column: span 5;
      }

      &.colspan-4 {
        grid-column: span 4;
      }

      &.colspan-3 {
        grid-column: span 3;
      }

      &.colspan-2 {
        grid-column: span 2;
      }

      &.colspan-1 {
        grid-column: span 1;
      }
    }

    fieldset[class^='colspan-'] dl,
    dl[class^='colspan-'] {
      div {
        max-width: 100%;
      }
    }

    fieldset.colspan-full dl,
    dl.colspan-full {
      grid-template-columns: repeat(auto-fit, minmax(var(--semanticFormsInputMinWidth), 1fr));
    }

    fieldset.colspan-5 dl,
    dl.colspan-5 {
      grid-template-columns: repeat(5, minmax(var(--semanticFormsInputMinWidth), 1fr));
    }

    fieldset.colspan-4 dl,
    dl.colspan-4 {
      grid-template-columns: repeat(4, minmax(var(--semanticFormsInputMinWidth), 1fr));
    }


    fieldset.colspan-3 dl,
    dl.colspan-3 {
      grid-template-columns: repeat(3, minmax(var(--semanticFormsInputMinWidth), 1fr));
    }

    fieldset.colspan-2 dl,
    dl.colspan-2 {
      grid-template-columns: repeat(2, minmax(var(--semanticFormsInputMinWidth), 1fr));
    }

    fieldset.colspan-1 dl,
    dl.colspan-1 {
      grid-template-columns: repeat(1, minmax(var(--semanticFormsInputMinWidth), 1fr));
    }
    // #endregion

    // #region container queries
    // The container is the <fieldset> element
    @container semanticForm (width > 2250px) {
      &.lowFlow fieldset dl,
      &.lowFlow dl {
        grid-template-columns: repeat(6, minmax(var(--semanticFormsInputMinWidth), 1fr));

        & dt:nth-of-type(6n + 1),
        & dd:nth-of-type(6n + 1) {
          grid-column: 1;
        }

        & dt:nth-of-type(6n + 2),
        & dd:nth-of-type(6n + 2) {
          grid-column: 2;
        }

        & dt:nth-of-type(6n + 3),
        & dd:nth-of-type(6n + 3) {
          grid-column: 3;
        }

        & dt:nth-of-type(6n + 4),
        & dd:nth-of-type(6n + 4) {
          grid-column: 4;
        }

        & dt:nth-of-type(6n + 5),
        & dd:nth-of-type(6n + 5) {
          grid-column: 5;
        }

        & dt:nth-of-type(6n + 6),
        & dd:nth-of-type(6n + 6) {
          grid-column: 6;
        }
      }
    }

    @container semanticForm (width < 2250px) {
      &.lowFlow fieldset dl,
      &.lowFlow dl {
        grid-template-columns: repeat(5, minmax(var(--semanticFormsInputMinWidth), 1fr));

        & dt:nth-of-type(5n + 1),
        & dd:nth-of-type(5n + 1) {
          grid-column: 1;
        }

        & dt:nth-of-type(5n + 2),
        & dd:nth-of-type(5n + 2) {
          grid-column: 2;
        }

        & dt:nth-of-type(5n + 3),
        & dd:nth-of-type(5n + 3) {
          grid-column: 3;
        }

        & dt:nth-of-type(5n + 4),
        & dd:nth-of-type(5n + 4) {
          grid-column: 4;
        }

        & dt:nth-of-type(5n + 5),
        & dd:nth-of-type(5n + 5) {
          grid-column: 5;
        }
      }
    }

    @container semanticForm (width < 1300px) {
      fieldset.colspan-5 dl,
      dl.colspan-5 {
        grid-template-columns: repeat(4, minmax(var(--semanticFormsInputMinWidth), 1fr)) !important;
      }

      div.colspan-5 {
        grid-column: span 4 !important;
      }

      &.lowFlow fieldset dl,
      &.lowFlow dl,
      &.lowFlow fieldset.colspan-5 dl,
      &.lowFlow dl.colspan-5 {
        grid-template-columns: repeat(4, minmax(var(--semanticFormsInputMinWidth), 1fr));

        & dt:nth-of-type(4n + 1),
        & dd:nth-of-type(4n + 1) {
          grid-column: 1;
        }

        & dt:nth-of-type(4n + 2),
        & dd:nth-of-type(4n + 2) {
          grid-column: 2;
        }

        & dt:nth-of-type(4n + 3),
        & dd:nth-of-type(4n + 3) {
          grid-column: 3;
        }

        & dt:nth-of-type(4n + 4),
        & dd:nth-of-type(4n + 4) {
          grid-column: 4;
        }
      }
    }

    @container semanticForm (width < 1050px) {
      fieldset.colspan-4 dl,
      fieldset.colspan-5 dl,
      dl.colspan-4,
      dl.colspan-5 {
        grid-template-columns: repeat(3, minmax(var(--semanticFormsInputMinWidth), 1fr)) !important;
      }

      div.colspan-4, div.colspan-5 {
        grid-column: span 3 !important;
      }

      &.lowFlow fieldset dl,
      &.lowFlow dl,
      &.lowFlow fieldset.colspan-4 dl,
      &.lowFlow dl.colspan-4,
      &.lowFlow fieldset.colspan-5 dl,
      &.lowFlow dl.colspan-5 {
        grid-template-columns: repeat(3, minmax(var(--semanticFormsInputMinWidth), 1fr));

        & dt:nth-of-type(3n + 1),
        & dd:nth-of-type(3n + 1) {
          grid-column: 1;
        }

        & dt:nth-of-type(3n + 2),
        & dd:nth-of-type(3n + 2) {
          grid-column: 2;
        }

        & dt:nth-of-type(3n + 3),
        & dd:nth-of-type(3n + 3) {
          grid-column: 3;
        }
      }
    }

    @container semanticForm (width < 800px) {
      fieldset.colspan-3 dl,
      fieldset.colspan-4 dl,
      fieldset.colspan-5 dl,
      dl.colspan-3,
      dl.colspan-4,
      dl.colspan-5 {
        grid-template-columns: repeat(2, minmax(var(--semanticFormsInputMinWidth), 1fr)) !important;
      }

      div.colspan-3,
      div.colspan-4,
      div.colspan-5 {
        grid-column: span 2 !important;
      }

      &.lowFlow fieldset dl,
      &.lowFlow dl,
      &.lowFlow fieldset.colspan-3 dl,
      &.lowFlow dl.colspan-3,
      &.lowFlow fieldset.colspan-4 dl,
      &.lowFlow dl.colspan-4,
      &.lowFlow fieldset.colspan-5 dl,
      &.lowFlow dl.colspan-5 {
        grid-template-columns: repeat(2, minmax(var(--semanticFormsInputMinWidth), 1fr));

        & dt:nth-of-type(2n + 1),
        & dd:nth-of-type(2n + 1) {
          grid-column: 1;
        }

        & dt:nth-of-type(2n + 2),
        & dd:nth-of-type(2n + 2) {
          grid-column: 2;
        }
      }
    }

    @container semanticForm (width < 550px) {
      fieldset.colspan-2 dl,
      fieldset.colspan-3 dl,
      fieldset.colspan-4 dl,
      fieldset.colspan-5 dl,
      dl.colspan-2,
      dl.colspan-3,
      dl.colspan-4,
      dl.colspan-5,
      dl {
        grid-template-columns: repeat(1, minmax(var(--semanticFormsInputMinWidth), 1fr)) !important;
      }

      div.colspan-2, div.colspan-3, div.colspan-4, div.colspan-5 {
        grid-column: span 1 !important;
      }

      &.lowFlow fieldset dl,
      &.lowFlow dl,
      &.lowFlow fieldset.colspan-2 dl,
      &.lowFlow dl.colspan-2,
      &.lowFlow fieldset.colspan-3 dl,
      &.lowFlow dl.colspan-3,
      &.lowFlow fieldset.colspan-4 dl,
      &.lowFlow dl.colspan-4,
      &.lowFlow fieldset.colspan-5 dl,
      &.lowFlow dl.colspan-5 {
        grid-template-columns: repeat(1, minmax(var(--semanticFormsInputMinWidth), 1fr));

        & dt:nth-of-type(n + 1),
        & dd:nth-of-type(n + 1) {
          grid-column: 1;
        }
      }
    }
    // #endregion

    // #region low flow form
    &.lowFlow {
        gap: 5px;

        dl {
          grid-auto-flow: dense;
        }

        // 1, 4, 7, ...
        & > dt:nth-of-type(2n + 1),
        & > dd:nth-of-type(2n + 1) {
          grid-column: 1;
        }

        // 2, 5, 8, ...
        & > dt:nth-of-type(2n + 2),
        & > dd:nth-of-type(2n + 2) {
          grid-column: 2;
        }

        dt {
           min-width: var(--semanticFormsInputMinWidth) !important; /* this matches the max-width of js-enabled inputs */

          // add required asterisk
          &:has(+ dd input:required) {
            label::after {
              content: ' *';
              color: red;
            }
          }
        }


        dd {
          margin-bottom: 10px;
          min-width: var(--semanticFormsInputMinWidth) !important; /* this matches the max-width of js-enabled inputs */

          // nudge single checkboxes to match checkbox groups
          &:not(.checkboxes) {
            input[type=checkbox] {
              margin-left: 10px;
            }
          }

          // remove "x" padding
          input:not([type=submit], [type=reset], [type=image], [type=checkbox], [type=radio], [type=range]),
          select,
          textarea {
            padding-right: 6px;
          }

          // subtext
          label {
            margin-top: -5px;
            font-size: small;
            color: var(--semanticFormsPlaceholderColor);
          }
        }
      }

      .checkboxes ul,
      .radios ul {
        margin-top: var(--semanticFormsInputTopMargin);
      }
    }
    // #endregion
  }

// #region tables

.semanticForms table,
table.semanticForms {
  table-layout: fixed;
  width: 100%;
  border-spacing: 0;
  border: var(--semanticFormsBorder);
  border-radius: 10px;
  margin-bottom: 15px;
  overflow: hidden;

  tr.title th {
    background-color: var(--semanticFormsTableTitleColor);
  }

  th {
    background-color: var(--semanticFormsTableHeaderColor);
    font-weight: bold;
  }

  tr:nth-child(odd) td {
    background-color: var(--semanticFormsTableOddColor);
  }

  tr:nth-child(even) td {
    background-color: var(--semanticFormsTableEvenColor);
  }

  td, th {
    border-right: var(--semanticFormsTableBorder);
    border-bottom: var(--semanticFormsTableBorder);
    padding: 7px 10px;
  }

  th:last-of-type, td:last-of-type {
    border-right: none;
  }

  tbody {
    tr:last-of-type {
      th, td {
        border-bottom: none;
      }
    }
  }

  // adjust styling of button menus in tables
  menu:has(li > input, li > label, li > button, li > select, li > textarea) {
    width: max-content;
  }

}
// #endregion
